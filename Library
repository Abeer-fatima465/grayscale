//
// F# image processing functions.
//
// More details?
//
// Name? School? Date?
//

namespace ImageLibrary

module Operations =
  //
  // all functions must be indented
  //

  //
  // Grayscale:
  //
  // Converts the image into grayscale and returns the 
  // resulting image as a list of lists. Pixels in grayscale
  // have the same value for each of the Red, Green and Blue
  // values in the RGB value.  Conversion to grayscale is done
  // by using a WEIGHTED AVERAGE calculation.  A normal average
  // (adding the three values and dividing by 3) is not the best,
  // since the human eye does not perceive the brightness of 
  // red, green and blue the same.  The human eye perceives 
  // green as brighter than red and it perceived red as brighter
  // than blue.  Research has shown that the following weighted
  // values should be used when calculating grayscale.
  //  - the green value should account for 58.7% of the grayscale.
  //  - the red value should account for   29.9% of the grayscale.
  //  - the blue value should account for  11.4% of the grayscale.
  //
  // So if the RGB values were (25, 75, 250), the grayscale amount 
  // would be 80, (25 * 0.299 + 75 * 0.587 + 250 * 0.114 => 80)
  // and then all three RGB values would become 80 or (80, 80, 80).
  // We will use truncation to cast from the floating point result 
  // to the integer grayscale value.
  //
  // Returns: updated image.
  //
  let average (r:int)(b:int)(g:int) =
    int (float(r) * 0.299 + float(b) * 0.587 + float(g) * 0.114)
  
  let rec Grayscale (width:int) 
                    (height:int) 
                    (depth:int) 
                    (image:(int*int*int) list list) = 
    // for now, just return the image back, i.e. do nothing:
    List.map(fun L -> List.map(fun (r, b,g) -> ((average r b g), (average r b g), (average r b g))) L) image



  //
  // Threshold
  //
  // Thresholding increases image separation --- dark values 
  // become darker and light values become lighter. Given a 
  // threshold value in the range 0 < threshold < color depth,
  // each RGB value is compared to see if it's > threshold.
  // If so, that RGB value is replaced by the color depth;
  // if not, that RGB value is replaced with 0. 
  //
  // Example: if threshold is 100 and depth is 255, then given 
  // a pixel (80, 120, 160), the new pixel is (0, 255, 255).
  //
  // Returns: updated image.
  // v = value t = threshold d = depth
  let thresholdCalc (v:int) (t:int) (d:int) = 
    if (v <= t) then 
      0
    else 
      d
  let rec Threshold (width:int) 
                    (height:int)
                    (depth:int)
                    (image:(int*int*int) list list)
                    (threshold:int) = 
    // for now, just return the image back, i.e. do nothing:
     List.map (fun L -> List.map( fun (r, b, g) -> ((thresholdCalc r threshold depth), (thresholdCalc b threshold depth), (thresholdCalc g threshold depth))) L) image
    // for now, just return the image back, i.e. do nothing:




  //
  // FlipHorizontal:
  //
  // Flips an image so that what’s on the left is now on 
  // the right, and what’s on the right is now on the left. 
  // That is, the pixel that is on the far left end of the
  // row ends up on the far right of the row, and the pixel
  // on the far right ends up on the far left. This is 
  // repeated as you move inwards toward the row's center.
  //
  // Returns: updated image.
  //
  let rec FlipHorizontal (width:int)
                         (height:int)
                         (depth:int)
                         (image:(int*int*int) list list) = 
    // for now, just return the image back, i.e. do nothing:
    List.map (fun L -> List.rev (L)) image


 //
  // Edge Detection:
  //
  // Edge detection is an algorithm used in computer vision to help
  // distinguish different objects in a picture or to distinguish an
  // object in the foreground of the picture from the background.
  //
  // Edge Detection replaces each pixel in the original image with
  // a black pixel, (0, 0, 0), if the original pixel contains an 
  // "edge" in the original image.  If the original pixel does not
  // contain an edge, the pixel is replaced with a white pixel 
  // (255, 255, 255).
  //
  // An edge occurs when the color of pixel is "signigicantly different"
  // when compared to the color of two of its neighboring pixels. 
  // We only compares each pixel in the image with the 
  // pixel immediately to the right of it and with the pixel
  // immediately below it. If either pixel has a color difference
  // greater than a given threshold, then it is "significantly
  // different" and an edge occurs. Note that the right-most column
  // of pixels and the bottom-most column of pixels can not perform
  // this calculation so the final image contain one less column
  // and one less row than the original image.
  //
  // To calculate the "color difference" between two pixels, we
  // treat the each pixel as a point on a 3-dimensional grid and
  // we calculate the distance between the two points using the
  // 3-dimensional extension to the Pythagorean Theorem.
  // Distance between (x1, y1, z1) and (x2, y2, z2) is
  //  sqrt ( (x1-x2)^2 + (y1-y2)^2 + (z1-z2)^2 )
  //
  // The threshold amount will need to be given, which is an 
  // integer 0 < threshold < 255.  If the color distance between
  // the original pixel either of the two neighboring pixels 
  // is greater than the threshold amount, an edge occurs and 
  // a black pixel is put in the resulting image at the location
  // of the original pixel. 
  //
  // Returns: updated image.
  //
  let calcedge x y z p =
    let (pr1, pg1, pb1) = x
    let (pr2, pg2, pb2) = y
    let (pr3, pg3, pb3) = z

    // let rD1 = (pr1 - pr2) * (pr1 - pr2) //r diff
    // let gD1 = (pg1 - pg2) * (pg1 - pg2) //g diff
    // let bD1 = (pb1 - pg2) * (pb1 - pb2) //b diif 
    // let rD2 = (pr1 - pr3) * (pr1 - pr3)
    // let gD2 = (pg1 - pg3) * (pg1 - pg3)
    // let bD2 = (pb1 - pb3) * (pb1 - pb3)

    // let diff1 = sqrt(double((rD1) + (gD1) + (bD1)))
    // let diff2 = sqrt(double(((rD2) +(gD2) + (bD2)))
  
    let diff1 = sqrt(double((pr1 - pr2)*(pr1 - pr2) + (pg1 - pg2)*(pg1 - pg2) + (pb1 - pb2)*(pb1 - pb2)))
    let diff2 = sqrt(double((pr1 - pr3)*(pr1 - pr3) + (pg1 - pg3)*(pg1 - pg3) + (pb1 - pb3)*(pb1 - pb3)))

    if diff1 > double(p) then 
       (0, 0, 0)
    elif diff2 > double(p) then
      (0, 0, 0)
    else
      (255, 255, 255)

  let rec func L1 L2 p =
    match L2 with
    | [] -> []
    | _ ->
        match L1 with
        | [] -> []
        | head::[] -> []
        | head::tail -> (calcedge head (List.head tail) (List.head L2) p)::(func (tail) (List.tail L2) p)

  let rec EdgeDetect (width:int)
               (height:int)
               (depth:int)
               (image:(int*int*int) list list)
               (threshold:int) = 
    match image with
    | [] -> []
    | head::[] -> []
    | head::tail -> (func head (List.head tail) threshold)::(EdgeDetect width height depth tail threshold)


  //
  // RotateRight90:
  //
  // Rotates the image to the right 90 degrees.
  //
  // Returns: updated image.
  //
  let rec RotateRight90 (width:int)
                        (height:int)
                        (depth:int)
                        (image:(int*int*int) list list) = 
    // for now, just return the image back, i.e. do nothing:
    List.map(fun L -> List.rev L) (List.transpose image)
